import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import { 
  Brain, 
  Shield, 
  Database, 
  MessageSquare, 
  BarChart3,
  Lock,
  Globe,
  Zap,
  Settings,
  CheckCircle,
  Info
} from "lucide-react";
import { AIAgentData } from "../AIAgentWizard";

interface AdvancedSettingsStepProps {
  data: AIAgentData;
  updateData: (updates: Partial<AIAgentData>) => void;
}

const CONVERSATION_FLOW_TEMPLATES = [
  {
    id: 'inquiry_handling',
    title: 'Inquiry Handling',
    description: 'Standard flow for new inquiries and questions',
    complexity: 'Basic'
  },
  {
    id: 'application_support',
    title: 'Application Support',
    description: 'Guide prospects through application processes',
    complexity: 'Intermediate'
  },
  {
    id: 'objection_handling',
    title: 'Objection Handling',
    description: 'Address common concerns and objections',
    complexity: 'Advanced'
  },
  {
    id: 'program_comparison',
    title: 'Program Comparison',
    description: 'Help prospects compare different programs',
    complexity: 'Intermediate'
  },
  {
    id: 'financial_assistance',
    title: 'Financial Assistance',
    description: 'Discuss scholarships and financial aid',
    complexity: 'Advanced'
  },
  {
    id: 'career_counseling',
    title: 'Career Counseling',
    description: 'Provide career guidance and advice',
    complexity: 'Advanced'
  }
];

const INTEGRATION_OPTIONS = [
  {
    id: 'crm_sync',
    title: 'CRM Synchronization',
    description: 'Sync lead data with your CRM system',
    category: 'Data'
  },
  {
    id: 'calendar_booking',
    title: 'Calendar Booking',
    description: 'Allow prospects to book appointments',
    category: 'Scheduling'
  },
  {
    id: 'email_marketing',
    title: 'Email Marketing',
    description: 'Integrate with email marketing platforms',
    category: 'Marketing'
  },
  {
    id: 'analytics_tracking',
    title: 'Analytics Tracking',
    description: 'Track conversions and engagement',
    category: 'Analytics'
  },
  {
    id: 'social_media',
    title: 'Social Media',
    description: 'Connect with social media platforms',
    category: 'Social'
  },
  {
    id: 'payment_processing',
    title: 'Payment Processing',
    description: 'Handle application fees and payments',
    category: 'Finance'
  }
];

const REPORTING_PREFERENCES = [
  {
    id: 'lead_metrics',
    title: 'Lead Metrics',
    description: 'Track lead volume, sources, and conversion rates'
  },
  {
    id: 'conversation_quality',
    title: 'Conversation Quality',
    description: 'Monitor response quality and satisfaction scores'
  },
  {
    id: 'response_times',
    title: 'Response Times',
    description: 'Track how quickly your agent responds to inquiries'
  },
  {
    id: 'escalation_analysis',
    title: 'Escalation Analysis',
    description: 'Analyze when and why leads are escalated to humans'
  },
  {
    id: 'revenue_attribution',
    title: 'Revenue Attribution',
    description: 'Track revenue generated by your AI agent'
  },
  {
    id: 'performance_trends',
    title: 'Performance Trends',
    description: 'Monitor agent performance over time'
  }
];

const COMPLIANCE_REQUIREMENTS = [
  {
    id: 'gdpr',
    title: 'GDPR Compliance',
    description: 'European data protection regulations',
    region: 'EU'
  },
  {
    id: 'ccpa',
    title: 'CCPA Compliance',
    description: 'California Consumer Privacy Act',
    region: 'US'
  },
  {
    id: 'ferpa',
    title: 'FERPA Compliance',
    description: 'Educational privacy requirements',
    region: 'US'
  },
  {
    id: 'sox',
    title: 'SOX Compliance',
    description: 'Sarbanes-Oxley financial regulations',
    region: 'US'
  },
  {
    id: 'pipeda',
    title: 'PIPEDA Compliance',
    description: 'Personal Information Protection Act',
    region: 'CA'
  },
  {
    id: 'iso27001',
    title: 'ISO 27001',
    description: 'Information security management',
    region: 'Global'
  }
];

const SECURITY_FEATURES = [
  {
    id: 'data_encryption',
    title: 'Data Encryption',
    description: 'Encrypt all stored and transmitted data'
  },
  {
    id: 'access_logging',
    title: 'Access Logging',
    description: 'Log all access to sensitive information'
  },
  {
    id: 'audit_trail',
    title: 'Audit Trail',
    description: 'Maintain detailed audit logs'
  },
  {
    id: 'secure_api',
    title: 'Secure API Access',
    description: 'Use encrypted API connections'
  },
  {
    id: 'backup_recovery',
    title: 'Backup & Recovery',
    description: 'Automated backup and recovery systems'
  },
  {
    id: 'intrusion_detection',
    title: 'Intrusion Detection',
    description: 'Monitor for security threats'
  }
];

export function AdvancedSettingsStep({ data, updateData }: AdvancedSettingsStepProps) {
  const toggleConversationFlow = (flowId: string) => {
    const current = data.conversation_flows || {};
    updateData({
      conversation_flows: {
        ...current,
        [flowId]: !current[flowId]
      }
    });
  };

  const toggleIntegration = (integrationId: string) => {
    const current = data.integration_settings || {};
    updateData({
      integration_settings: {
        ...current,
        [integrationId]: !current[integrationId]
      }
    });
  };

  const toggleReportingPreference = (prefId: string) => {
    const current = data.reporting_preferences || [];
    const updated = current.includes(prefId)
      ? current.filter(id => id !== prefId)
      : [...current, prefId];
    updateData({ reporting_preferences: updated });
  };

  const toggleComplianceRequirement = (reqId: string) => {
    const current = data.compliance_requirements || [];
    const updated = current.includes(reqId)
      ? current.filter(id => id !== reqId)
      : [...current, reqId];
    updateData({ compliance_requirements: updated });
  };

  const toggleSecurityFeature = (featureId: string) => {
    const current = data.security_settings || {};
    updateData({
      security_settings: {
        ...current,
        [featureId]: !current[featureId]
      }
    });
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center space-y-2">
        <div className="p-3 bg-indigo-100 rounded-full w-fit mx-auto">
          <Brain className="h-8 w-8 text-indigo-600" />
        </div>
        <h2 className="text-2xl font-bold">Advanced Settings</h2>
        <p className="text-muted-foreground max-w-2xl mx-auto">
          Configure advanced features, integrations, security settings, and compliance requirements for your AI agent.
        </p>
      </div>

      {/* Conversation Flows */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <MessageSquare className="h-5 w-5" />
            Conversation Flows
          </CardTitle>
          <p className="text-sm text-muted-foreground">
            Enable specialized conversation flows for different scenarios
          </p>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {CONVERSATION_FLOW_TEMPLATES.map((flow) => {
              const isSelected = data.conversation_flows?.[flow.id];
              return (
                <Button
                  key={flow.id}
                  variant={isSelected ? "default" : "outline"}
                  className="h-auto p-4 text-left justify-start"
                  onClick={() => toggleConversationFlow(flow.id)}
                >
                  <div className="flex items-start gap-3 w-full">
                    <Checkbox checked={isSelected} className="mt-1" />
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <span className="font-medium">{flow.title}</span>
                        <Badge 
                          variant={flow.complexity === 'Basic' ? 'secondary' : flow.complexity === 'Intermediate' ? 'default' : 'destructive'}
                          className="text-xs"
                        >
                          {flow.complexity}
                        </Badge>
                      </div>
                      <p className="text-xs opacity-75">{flow.description}</p>
                    </div>
                  </div>
                </Button>
              );
            })}
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Integrations */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Zap className="h-5 w-5" />
              Integrations
            </CardTitle>
            <p className="text-sm text-muted-foreground">
              Connect your agent with external systems
            </p>
          </CardHeader>
          <CardContent className="space-y-3">
            {INTEGRATION_OPTIONS.map((integration) => {
              const isSelected = data.integration_settings?.[integration.id];
              return (
                <div key={integration.id} className="flex items-center justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-2">
                      <Label className="font-medium">{integration.title}</Label>
                      <Badge variant="outline" className="text-xs">
                        {integration.category}
                      </Badge>
                    </div>
                    <p className="text-sm text-muted-foreground">{integration.description}</p>
                  </div>
                  <Switch
                    checked={isSelected}
                    onCheckedChange={() => toggleIntegration(integration.id)}
                  />
                </div>
              );
            })}
          </CardContent>
        </Card>

        {/* Reporting Preferences */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BarChart3 className="h-5 w-5" />
              Reporting
            </CardTitle>
            <p className="text-sm text-muted-foreground">
              Choose what metrics to track and report
            </p>
          </CardHeader>
          <CardContent className="space-y-3">
            {REPORTING_PREFERENCES.map((pref) => {
              const isSelected = data.reporting_preferences?.includes(pref.id);
              return (
                <div key={pref.id} className="flex items-center space-x-2">
                  <Checkbox
                    checked={isSelected}
                    onCheckedChange={() => toggleReportingPreference(pref.id)}
                  />
                  <div className="flex-1">
                    <Label className="font-medium">{pref.title}</Label>
                    <p className="text-sm text-muted-foreground">{pref.description}</p>
                  </div>
                </div>
              );
            })}
          </CardContent>
        </Card>
      </div>

      {/* Security Settings */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5" />
            Security Features
          </CardTitle>
          <p className="text-sm text-muted-foreground">
            Enable security features to protect your data and systems
          </p>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {SECURITY_FEATURES.map((feature) => {
              const isSelected = data.security_settings?.[feature.id];
              return (
                <div key={feature.id} className="flex items-center justify-between p-3 border rounded-lg">
                  <div className="flex-1">
                    <Label className="font-medium">{feature.title}</Label>
                    <p className="text-sm text-muted-foreground">{feature.description}</p>
                  </div>
                  <Switch
                    checked={isSelected}
                    onCheckedChange={() => toggleSecurityFeature(feature.id)}
                  />
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>

      {/* Compliance Requirements */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Lock className="h-5 w-5" />
            Compliance Requirements
          </CardTitle>
          <p className="text-sm text-muted-foreground">
            Select applicable compliance standards for your organization
          </p>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {COMPLIANCE_REQUIREMENTS.map((requirement) => {
              const isSelected = data.compliance_requirements?.includes(requirement.id);
              return (
                <Button
                  key={requirement.id}
                  variant={isSelected ? "default" : "outline"}
                  className="h-auto p-4 text-left justify-start"
                  onClick={() => toggleComplianceRequirement(requirement.id)}
                >
                  <div className="flex items-start gap-3 w-full">
                    <Checkbox checked={isSelected} className="mt-1" />
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <span className="font-medium text-sm">{requirement.title}</span>
                        <Badge variant="outline" className="text-xs">
                          {requirement.region}
                        </Badge>
                      </div>
                      <p className="text-xs opacity-75">{requirement.description}</p>
                    </div>
                  </div>
                </Button>
              );
            })}
          </div>
        </CardContent>
      </Card>

      {/* Configuration Summary */}
      <Card className="border-2 border-primary/20">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="h-5 w-5 text-primary" />
            Advanced Configuration Summary
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
            <div className="p-4 bg-muted/50 rounded-lg text-center">
              <MessageSquare className="h-6 w-6 mx-auto mb-2 text-primary" />
              <div className="font-medium">
                {Object.values(data.conversation_flows || {}).filter(Boolean).length}
              </div>
              <div className="text-sm text-muted-foreground">Conversation flows</div>
            </div>
            <div className="p-4 bg-muted/50 rounded-lg text-center">
              <Zap className="h-6 w-6 mx-auto mb-2 text-primary" />
              <div className="font-medium">
                {Object.values(data.integration_settings || {}).filter(Boolean).length}
              </div>
              <div className="text-sm text-muted-foreground">Integrations</div>
            </div>
            <div className="p-4 bg-muted/50 rounded-lg text-center">
              <Shield className="h-6 w-6 mx-auto mb-2 text-primary" />
              <div className="font-medium">
                {Object.values(data.security_settings || {}).filter(Boolean).length}
              </div>
              <div className="text-sm text-muted-foreground">Security features</div>
            </div>
            <div className="p-4 bg-muted/50 rounded-lg text-center">
              <Lock className="h-6 w-6 mx-auto mb-2 text-primary" />
              <div className="font-medium">{data.compliance_requirements?.length || 0}</div>
              <div className="text-sm text-muted-foreground">Compliance standards</div>
            </div>
          </div>

          <div className="p-3 bg-blue-50 rounded-lg">
            <div className="flex items-start gap-2">
              <Info className="h-4 w-4 text-blue-600 mt-0.5 flex-shrink-0" />
              <div className="text-xs text-blue-800">
                <p className="font-medium">Advanced Features Configured</p>
                <p>
                  Your agent is equipped with advanced conversation flows, integrations, and security features. 
                  These settings can be modified after creation if needed.
                </p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}